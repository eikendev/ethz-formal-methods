theory P2a
begin

section{* P2 protocol *}

/*
 * A -> B : x
 * B -> A : y
 * A -> B : [y]k(B,A)
 * B -> A : [x]k(A,B)
 */

builtins:
  symmetric-encryption

functions:
  hmac/2

equations:
  hmac(m, k) = senc(m, k)

/* Set up long term pre-shared key for A and B. */
rule Setup_PSK:
    [ Fr(~k)
    ]
  --[ UnidirectionalKey($A, $B, ~k) ]->
    [ !St_PSK($A, $B, ~k)
    ]

rule Reveal_PSK_A:
    [ !St_PSK(A, B, k) ]
  --[ Reveal(A) ]->
    [ Out(k) ]

rule Reveal_PSK_B:
    [ !St_PSK(A, B, k) ]
  --[ Reveal(B) ]->
    [ Out(k) ]

/* Initialize thread for role A. */
rule A_0:
    [ Fr(~id)
    , !St_PSK(A, B, krecv)
    , !St_PSK(B, A, ksend)
    ]
  --[ Create(~id, 'I') ]->
    [ St_A_0(A, ~id, B, krecv, ksend)
    ]

/* Initialize thread for role B. */
rule B_0:
    [ Fr(~id)
    , !St_PSK(B, A, krecv)
    , !St_PSK(A, B, ksend)
    ]
  --[ Create(~id, 'R') ]->
    [ St_B_0(B, ~id, A, krecv, ksend)
    ]

/* Send the nonce x from role A to role B. */
rule A_1:
    [ Fr(~x)
    , St_A_0(A, id, B, krecv, ksend)
    ]
  -->
    [ St_A_1(A, id, B, krecv, ksend, ~x)
    , Out(<'NONCE', ~x>)
    ]

/* Receive nonce x from role A. */
rule B_1:
    [ St_B_0(B, id, A, krecv, ksend)
    , In(<'NONCE', x>)
    ]
  -->
    [ St_B_1(B, id, A, krecv, ksend, x)
    ]

/* Send the nonce y from role B to role A. */
rule B_2:
    [ Fr(~y)
    , St_B_1(B, id, A, krecv, ksend, x)
    ]
  --[ Running(B, A, <'I', 'R', x, ~y>) ]->
    [ St_B_2(B, id, A, krecv, ksend, x, ~y)
    , Out(<'NONCE', ~y>)
    ]

/* Receive nonce y from role B. */
rule A_2:
    [ St_A_1(A, id, B, krecv, ksend, x)
    , In(<'NONCE', y>)
    ]
  --[ Running(A, B, <'R', 'I', y, x>) ]->
    [ St_A_2(A, id, B, krecv, ksend, x, y)
    ]

/* Return the HMAC of the nonce y to role B. */
rule A_3:
    [ St_A_2(A, id, B, krecv, ksend, x, y)
    ]
  -->
    [ St_A_3(A, id, B, krecv, ksend, x, y)
    , Out(<'HMAC', hmac(y, ksend)>)
    ]

/* Receive the HMAC of y from role A. */
rule B_3:
    [ St_B_2(B, id, A, krecv, ksend, x, y)
    , In(<'HMAC', hmac(y, krecv)>)
    ]
  --[ Commit(B, A, <'R', 'I', x, y>)
    , Honest(B)
    , Honest(A)
    ]->
    [ St_B_3(B, id, A, krecv, ksend, x, y)
    ]

/* Return the HMAC of the nonce x to role A. */
rule B_4:
    [ St_B_3(B, id, A, krecv, ksend, x, y)
    ]
  --[ Finish(B, A, 'R', krecv, ksend, x, y)
    ]->
    [ St_B_4(B, id, A, krecv, ksend, x, y)
    , Out(<'HMAC', hmac(x, ksend)>)
    ]

/* Receive the HMAC of x from role B. */
rule A_4:
    [ St_A_3(A, id, B, krecv, ksend, x, y)
    , In(<'HMAC', hmac(x, krecv)>)
    ]
  --[ Commit(A, B, <'I', 'R', x, y>)
    , Honest(A)
    , Honest(B)
    , Finish(A, B, 'I', krecv, ksend, x, y)
    ]->
    [ St_A_4(A, id, B, krecv, ksend, x, y)
    ]

restriction UnidirectionalKeys:
  "All a b k #i.
    UnidirectionalKey(a, b, k) @i
      & UnidirectionalKey(b, a, k) @i
      & not (a = b)
      ==> F"

/* Executability lemma gets verified. */
lemma executable:
  exists-trace
    "Ex a b x y k1 k2 #i #j.
      Finish(b, a, 'R', k1, k2, x, y) @i
      & Finish(a, b, 'I', k2, k1, x, y) @j
      & (All id1 id2 #k1 #k2. Create(id1, 'I') @k1 & Create(id2, 'I') @k2 ==> id1 = id2)
      & (All id1 id2 #k1 #k2. Create(id1, 'R') @k1 & Create(id2, 'R') @k2 ==> id1 = id2)
      & not(a = b)
      & not(Ex X #k. Reveal(X)@k)"

/* Injective agreement of A with B on both nonces x and y does not get verified. */
lemma injectiveagreementINITIATOR:
  "All a b x y #i.
    Commit(a,b,<'I','R',x,y>) @i
    ==> (Ex #j. Running(b,a,<'I','R',x,y>) @j
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',x,y>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

/* Injective agreement of B with A on both nonces x and y does not get verified. */
lemma injectiveagreementRESPONDER:
  "All a b x y #i.
    Commit(a,b,<'R','I',y,x>) @i
    ==> (Ex #j. Running(b,a,<'R','I',y,x>) @j
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',y,x>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

end
